{
  "Begin end": {
    "prefix": "begin",
    "body":  [
      "begin\r",
      "\t$1\r",
      "end;\r"
      ],
    "description": "Begin end"
  },

  "SetMenuBarColor": {
    "prefix": "SetMenuBarColor",
    "body":[
      "SetMenuBarColor(${1:string_Color});"
    ],
    "description": "Set color of the menu bar"
  },

  "block comment": {
    "prefix": "blockcomment",
    "body": [
      "----------------------------------------------------------------------------",
      "--",
      "--\t$1",
      "--",
      "----------------------------------------------------------------------------"
    ],
    "description": "Block Comment"
  },

  "IsValid": {
    "prefix": "IsValid",
    "body": [
      "if isValid(${1:string_Input}, ${2:string_ValidFor}, ${3:int_Length}) = true then",
      "\t$4",
      "end if;"
    ],
    "description": "RLWS iRite template. Checks if entered value is valid for (S)tring, (I)nteger, (R)eal or (P)ercentage"
    },

  "PromptForEntry": {
    "prefix": "PromptForEntry",
    "body": [
      "PromptForEntry(${1:string_Prompt}, ${2:integer_EntryMode}, ${3:string_Default}, ${4:bit_prompt});"
    ],
    "description": "RLWS iRite template.  Prompts for user entry with passed in parameters"
  },

  "SetBargraphLevel": {
    "prefix": "SetBargraphLevel",
    "body": [
      "SetBargraphLevel(${1:int_WidgetNum}, ${2:int_Percentage});"
    ],
    "description": "Sets referenced bargraph to given percentage"
  },

  "handler": {
    "prefix": "handler",
    "body": [
      "handler ${1:HandlerName};",
      "begin",
      "\t$0",
      "end;"
    ],
    "description": "Handler template."
    },

  "else end": {
    "prefix": "else",
    "body": [
      "else",
      "\t$0",
      "end if;"
    ],
    "description": "else end"
  },

  "function end": {
    "prefix": "function",
    "body": [
      "function ${1:MyFunction}(${2:params}:${3:integer};",
      "begin",
      "\t$0",
      "end;"
    ],
    "description": "function template with begin and end"
  },

  "if (no begin end)": {
    "prefix": "if",
    "body": [
      "if ${1:True} then",
      "\t$0"
    ],
    "description": "if (no begin end)"
  },

  "if end if": {
    "prefix": "if end if",
    "body": [
      "if ${1:True} then",
      "\t$0",
      "end if;"
    ],
    "description": "if statement with end if"
  },

  "if else (no begin end)": {
    "prefix": "if else",
    "body": [
      "if ${1:True} then",
      "\t${2:then code here}",
      "else",
      "\t${3:else code here}"
    ],
    "description": "if else (no begin end)"
  },

  "if else end if": {
    "prefix": "if else end if",
    "body": [
      "if ${1:True} then",
      "\t${2:then code here}",
      "else",
      "\t${3:else code here}",
      "end if;"
    ],
    "description": "if else end if"
  },

  "SelectScreen": {
    "prefix": "SelectScreen",
    "body":[
      "SelectScreen(${1:int_ScreenNumber});"
    ],
    "description": "Select Active Screen"
  },

  "EnableHandler": {
    "prefix": "EnableHandler",
    "body":[
      "EnableHandler(${1:string_HandlerName});"
    ],
    "description": "Enable referenced handler"
  },

  "DisableHandler": {
    "prefix": "DisableHandler",
    "body":[
      "DisableHandler(${1:string_HandlerName});"
    ],
    "description": "Disable referenced handler "
  },

  "procedure": {
    "prefix": "procedure",
    "body": [
      "procedure ${1:MyProcedure};",
      "begin",
      "\t$0",
      "end;"
    ],
    "description": "procedure template"
  },

  "FindFirst": {
    "prefix": "FindFirst",
    "body": [
      "FindFirst(${1:db_Database}_${2:string_Field})"
    ],
    "description": "Finds the first record in the referenced database that matches the contents of <Database> column <field>."
  },

  "FindNext": {
    "prefix": "FindNext",
    "body": [
      "FindFirst(${1:db_Database}_${2:string_Field})"
    ],
    "description": "Finds the next record in the referenced database that matches the contents of <Database> column <field>."
  },

  "FindLast": {
    "prefix": "FindLast",
    "body": [
      "FindFirst(${1:db_Database}_${2:string_Field})"
    ],
    "description": "Finds the last record in the referenced database that matches the contents of <Database> column <field>."
  },

  "GetGross ": {
    "prefix": "GetGross",
    "body": [
      "GetGross(${1:int_ScaleNum}, ${2:units_Units}, ${3:VAR real_GrossWgt});"
    ],
    "description": "Assigns current gross weight in provide scale and units to the 3rd parameter"
  },

  "GetNet ": {
    "prefix": "GetNet",
    "body": [
      "GetNet(${1:int_ScaleNum}, ${2:units_Units}, ${3:VAR real_NetWgt});"
    ],
    "description": "Assigns current net weight in provide scale and units to the 3rd parameter"
  },

  "GetTare ": {
    "prefix": "GetTare",
    "body": [
      "GetTare(${1:int_ScaleNum}, ${2:units_Units}, ${3:VAR real_TareWgt});"
    ],
    "description": "Assigns current tare weight in provide scale and units to the 3rd parameter"
  },

  "GetFilteredCount ": {
    "prefix": "GetFilteredCount",
    "body": [
      "GetFilteredCount(${1:int_ScaleNum}, ${2:VAR int_FilteredCount});"
    ],
    "description": "Sets FilteredCount to current filtered A/D count for scale ScaleNum"
  },

  "GetRawCount ": {
    "prefix": "GetRawCount",
    "body": [
      "GetRawCount(${1:int_ScaleNum}, ${2:VAR int_RawCount});"
    ],
    "description": "Assigns raw A/D count for ScaleNum to RawCount"
  },

  "SetImageWidgetPath ": {
    "prefix": "SetImageWidgetPath",
    "body": [
        "SetImageWidgetPath(${1:int_Widget}, ${2:string_fileName});"
    ],
    "description": "Displays image widget as a BMP or PNG file. File needs to be stored as on a micro SD card and stored in a folder called sdimages"
  },

  "DebugSerial": {
    "prefix": "Debug",
    "body": ["WriteLn(g_iDebug, \"${1:int_lineNumber} ${2:string_Message}\");"],
    "description": "Debug Serial (requires adding cmd32 handler with code to actually produce debug)"
  },

  "DebugTCP": {
    "prefix": "Debug",
    "body": ["WriteOutLn(g_sDebug, \"${1:int_lineNumber} ${2:string_Message}\");"],
    "description": "Debug TCP (requires adding handler with code to actually produce debug)"

  },

  "WriteLn": {
    "prefix": "WriteLn",
    "body": [
    "WriteLn(${1:int_Port}, \"${2:string_message}\")"

      ],

    "description": "Write message out Port with CR/LF at the end"
    },

  "Write": {
    "prefix": "Write",
    "body": [
    "WriteLn(${1:int_Port}, \"${2:string_message}\")"

      ],

    "description": "Write message out Port without CR/LF at the end"
  },

  "WriteOutLn": {
    "prefix": "WriteOutLn",
    "body": [
      "WriteOutLn(TCPC${1:int_Port}, \"${2:string_message}\");"

      ],
    "description": "Write message out TCPC(Port) with CR/LF at the end "
  },

  "WriteOut": {
    "prefix": "WriteOut",
    "body": [
      "WriteOutLn(TCPC${1:int_Port}, \"${2:string_message}\");"

      ],
    "description": "Write message out TCPC(Port) without CR/LF at the end "
  },

  "While Loop": {
    "prefix": "while",
    "body": [
      "while ${string_condition}",
      "loop",
      "\t$0",
      "end loop;"
    ],
    "description": "While Loop"
  },

  "Left$": {
    "prefix": "Left$",
    "body": [
      "Left$(${1:string_Source}, ${2:int_Len})"
    ],
    "description": "Returns a string containing the leftmost 'Len' characters of string 'Source'. If 'Len' is greater than the length of 'Source', the function returns a copy of 'Source'."
  },

  "SetLabelText": {
    "prefix": "SetLabelText",
    "body": [
        "SetLabelText(${1:int_LabelID}, \"${2:string_Message}\");"
    ],
    "description": "Set the text of label widget 'LabelID' to 'Message'"
  },

  "SetWidgetColor": {
    "prefix": "SetWidgetColor",
    "body": [
        "SetWidgetColor(${1:int_WidgetID}, \"${2:string_Color}\");"
      ],
    "description": "Sets the color of widget 'WidgetID' to 'Color'. A set widget color uses HTML RGB style."

  },

"SetBGColor": {
  "prefix": "SetBGColor",
  "body": [
      "SetBGColor(${1:color_Background}, \"${2:color_Text}\");"
    ],
  "description": "Sets the text and background color (name or HTML RGB Style)"

},

"SetWidgetVisibility": {
  "prefix": "SetWidgetVisibility",
  "body": [
    "SetWidgetVisibility(${1:int_WidgetID}, ${2:VonVoff_value};"
  ],
  "description": "Sets the visibility state of widget 'WidgetID' to 'Value' (vOn or Voff)."
},

"EventWidget": {
  "prefix": "EventWidget",
  "body": [
    "EventWidget"
  ],
  "description": "System Variable that contains value of the widget number that triggered event (typically WidgetClicked)"
},

"EventKey": {
    "prefix": "EventKey",
    "body": [
      "EventKey"
    ],
    "description": "EventKey"
  },

  "For Loop": {
    "prefix": "for loop simple",
    "body": [
      "for i := 1 to ${1:int_Count}",
      "loop",
      "\t$2",
      "end loop;"
    ],
    "description": "For Loop 1 to 'Count'"
  },

  "for loop": {
    "prefix": "for loop custom",
    "body": [
      "for ${1:i} := ${2:1} to ${3:max}",
      "loop",
      "\t$0",
      "end loop;"
    ],
    "description": "for loop customize iterator, starting value and ending value"
  },

  "IfElse": {
    "prefix": "if else",
    "body": [
      "if ${1:string_command} then",
      "\t$2",
      "else",
      "\t$3",
      "end if;"
    ],
    "description": "if else end if;"
  },

  "Separator Line": {
    "prefix": "Dashed Line",
    "body": [
        "-------------------------------------------------------------------------------------"
    ],
    "description": "Dashes"
  },

  "SetScaleSymbols": {
    "prefix": "SetScaleSymbols",
    "body": [
      "SetScaleSymbols(${1:string_BlackWhite});"
    ],
    "Description": "Sets the scaleâ€™s symbols to black or white"
  },

  "GetCapacity ": {
    "prefix": "GetCapacity",
    "body": [
      "GetCapacity(${1:int_ScaleNum}, ${2:units_Units}, ${3:VAR real_ScaleCapacity});"
    ],
    "description": "Sets 'ScaleCapacity' to the configured capacity for scale 'ScaleNum' and units 'Units'."
  },

  "GetMV ": {
    "prefix": "GetMV",
    "body": ["GetMV(${1:int_ScaleNum}, ${2:VAR real_Millivolts});"],
    "description": "Returns the 'Millivolts' reading for a scale."
  },

  "GetGrads ": {
    "prefix": "GetGrads",
    "body": ["GetGrads(${1:int_ScaleNum}, ${2:VAR int_Grads});"],
    "description": "Sets 'Grads' to the configured grad value of scale 'ScaleNum'."
  },

  "GetCountBy ": {
    "prefix": "GetCountBy",
    "body": ["GetCountBy(${1:int_ScaleNum}, ${2:units_Units}, ${3:VAR real_CountBy});"],
    "description": "Sets 'CountBy' to the real count-by value on scale 'ScaleNum', in units 'Units'."
  },

  "SetAlgOut ": {
    "prefix": "SetAlgOut",
    "body": ["SetAlgOut(${1:int_SlotNum}, ${2:real_Pct});"],
    "description": "Sets the analog output card in slot 'SlotNum' to the percentage 'Pct'. Negative 'Pct' values are set to zero; values greater than 100.0 are set to 100.0"
  },

  "getLCCC ": {
    "prefix": "getLCCC",
    "body": ["getLCCC(${1:int_ScaleNum}, ${2:VAR int_LCCC});"],
    "description": "Sets 'LCCC' to the calibrated load cell count at capacity for scale 'ScaleNum'"
  },

  "getLCCD ": {
    "prefix": "getLCCD",
    "body": ["getLCCD(${1:int_ScaleNum}, ${2:VAR int_LCCD});"],
    "description": "Sets 'LCCD' to the calibrated deadload count for scale 'ScaleNum'"
  },

  "getLCCW ": {
    "prefix": "getLCCW",
    "body": ["getLCCW(${1:int_ScaleNum}, ${2:VAR int_SpanCount});"],
    "description": "Sets 'SpanCount' to the calibrated span count for scale 'ScaleNum'."
  },

  "GetWVal ": {
    "prefix": "GetWVal",
    "body": ["GetWVal(${1:int_ScaleNum}, ${2:VAR TestWeightValue});"],
    "description": "Sets 'TestWeightValue' to the configured WVAL (test weight value) for scale 'ScaleNum'."
  },

  "GetZeroCount ": {
    "prefix": "GetZeroCount",
    "body": ["GetZeroCount(${1:int_ScaleNum}, ${2:VAR int_ZeroCount});"],
    "description": "Sets 'ZeroCount' to the acquired zero count for scale 'ScaleNum'"
  },

  "PulseCount ": {
    "prefix": "PulseCount",
    "body": ["PulseCount(${1:int_SlotNum}, ${2:VAR int_Count});"],
    "description": "Sets 'Count' to the current pulse count of the pulse input card in slot 'SlotNum'."
  },

  "ClearPulseCount ": {
    "prefix": "ClearPulseCount",
    "body": ["ClearPulseCount(${1:int_ScaleNum};"],
    "description": "Sets the pulse count of the pulse input card in slot 'SlotNum' to zero"
  },

  "AcquireTare ": {
    "prefix": "AcquireTare",
    "body": ["AcquireTare(${1:int_ScaleNum});"],
    "description": "Acquires a pushbutton tare from scale 'ScaleNum'"
  },

  "SetTare ": {
    "prefix": "SetTare",
    "body": ["SetTare(${1:int_ScaleNum}, ${2:unit_Units}, ${3:real_TareWeight});"],
    "description": "Sets the tare weight for 'ScaleNum' to 'TareWeight' in 'Units'"
  },

  "GetTareType ": {
    "prefix": "GetTareType",
    "body": ["GetTareType(${1:int_ScaleNum}, ${2:TareType_TT});"],
    "description": "Sets 'TT' to indicate type of tare currently on scale 'ScaleNum'"
  },

  "ClearTare ": {
    "prefix": "ClearTare",
    "body": ["ClearTare(${1:int_ScaleNum});"],
    "description": "Removes the tare associated with scale 'ScaleNum' and sets the tare type associated with the scale to NoTare."
  },

  "GetROC ": {
    "prefix": "GetROC",
    "body": ["GetROC(${1:int_ScaleNum}, ${2:real_ROC});"],
    "description": "Sets 'ROC' to the current rate-of-change value of scale 'ScaleNum'"
  },

  "GetAccum ": {
    "prefix": "GetAccum",
    "body": ["GetAccum(${1:int_ScaleNum}, ${2:unit_Units}, ${3:real_AccumWeight});"],
    "description": "Sets 'AccumWeight' to the value of the accumulator associated with scale 'ScaleNum', in the units specified by 'Units'."
  },

  "SetAccum ": {
    "prefix": "SetAccum",
    "body": ["SetAccum(${1:int_ScaleNum}, ${2:unit_Units}, ${3:real_AccumWeight});"],
    "description": "Sets the value of the accumulator associated with scale 'ScaleNum' to weight 'AccumWeight', in units specified by 'Units'."
  },

  "GetAvgAccum ": {
    "prefix": "GetAvgAccum",
    "body": ["GetAvgAccum(${1:int_ScaleNum}, ${2:units_Units}, ${3:real_AvgAccumWeight});"],
    "description": "Sets 'AvgAccumWeight' to the average accumulator value associated with scale 'ScaleNum', in the units specified by 'Units', since the accumulator was last cleared."
  },

  "GetAccumCount ": {
    "prefix": "GetAccumCount",
    "body": ["GetAccumCount(${1:int_ScaleNum}, ${2:int_AccumCount});"],
    "description": "Sets 'AccumCount' to the number of accumulations performed for scale 'ScaleNum' since its accumulator was last cleared"
  },

  "GetAccumDate ": {
    "prefix": "GetAccumDate",
    "body": ["GetAccumDate(${1:int_ScaleNum}, ${2:VAR string_Date});"],
    "description": "Sets 'Date' to the date of the most recent accumulation performed by scale 'ScaleNum'."
  },

  "GetAccumTime ": {
    "prefix": "GetAccumTime",
    "body": ["GetAccumTime(${1:int_ScaleNum}, ${2:VAR string_Time});"],
    "description": "Sets 'Time' to the time of the most recent accumulation performed by scale 'ScaleNum'"
  },

  "ClearAccum ": {
    "prefix": "ClearAccum",
    "body": ["ClearAccum(${1:int_ScaleNum});"],
    "description": "Sets the value of the accumulator for scale 'ScaleNum' to zero."
  },

  "SelectScale ": {
    "prefix": "SelectScale",
    "body": ["SelectScale(${1:int_ScaleNum});"],
    "description": "Sets scale 'ScaleNum' as the current, active scale."
  },

  "GetMode ": {
    "prefix": "GetMode",
    "body": ["GetMode(${1:int_ScaleNum}, ${2:VAR mode_Mode});"],
    "description": "Sets 'Mode' to the value representing the current display mode for scale 'ScaleNum'"
  },

  "GetUnits ": {
    "prefix": "GetUnits",
    "body": ["GetUnits(${1:int_ScaleNum}, ${2:VAR units_Units});"],
    "description": "Sets 'Units' to the value representing the current display units for scale 'ScaleNum'."
  },

  "GetUnitsString ": {
    "prefix": "GetUnitsString",
    "body": ["GetUnitsString(${1:int_ScaleNum}, ${2:units_Units}, ${3:VAR string_UnitsString});"],
    "description": "Sets 'UnitsString' to the text string representing the current display units for scale 'ScaleNum'."
  },

  "InCOZ ": {
    "prefix": "InCOZ",
    "body": ["InCOZ(${1:int_ScaleNum}, ${2:VAR int_InCoz});"],
    "description": "Sets 'InCoz' to a non-zero value if scale 'ScaleNum' is within 0.25 grads of gross zero. If the condition is not met, 'InCoz' is set to zero."
  },

  "InRange ": {
    "prefix": "InRange",
    "body": ["InRange(${1:int_ScaleNum}, ${2:VAR int_InRange});"],
    "description": "Sets 'InRange' to zero value if scale 'ScaleNum' is in an overload or underload condition. Otherwise, 'InRange' is set to a non-zero value."
  },

  "InMotion ": {
    "prefix": "InMotion",
    "body": ["InMotion(${1:scaleNum}, ${2:V});"],
    "description": "Sets 'InMotion' to a non-zero value if scale 'ScaleNum' is in motion. Otherwise, 'InMotion' is set to zero."
  },

  "SetMode ": {
    "prefix": "SetMode",
    "body": ["SetMode(${1:int_ScaleNum}, ${2:mode_Mode});"],
    "description": "Sets the current display mode on scale 'ScaleNum' to 'Mode'."
  },

  "SetUnits ": {
    "prefix": "SetUnits",
    "body": ["SetUnits(${1:int_ScaleNum}, ${2:units_Units});"],
    "description": "Sets the current display units on scale 'ScaleNum' to 'Units'."
  },

  "ZeroScale ": {
    "prefix": "ZeroScale",
    "body": ["ZeroScale(${1:int_ScaleNum});"],
    "description": "Performs a gross zero scale operation for 'ScaleNum'."
  },

  "GetSPValue ": {
    "prefix": "GetSPValue",
    "body": ["GetSPValue(${1:int_SPNum}, ${2:VAR real_SPValue});"],
    "description": "Sets 'SPValue' to the current value (VALUE parameter) of the setpoint 'SPNum'"
  },

  "GetSPBand ": {
    "prefix": "GetSPBand",
    "body": ["GetSPBand(${1:int_SPNum}, ${2:VAR real_SPBand});"],
    "description": "Sets 'SPBand' to the current band value (BANDVAL parameter) of the setpoint 'SPNum'."
  },

  "GetSPPreact ": {
    "prefix": "GetSPPreact",
    "body": ["GetSPPreact(${1:int_SPNum}, ${2:VAR real_SPPreact});"],
    "description": "Sets 'SPPreact' to the current preact value (PREACT parameter) of the setpoint 'SPNum'."
  },

  "GetSPHyster ": {
    "prefix": "GetSPHyster",
    "body": ["GetSPHyster(${1:int_SPNum}, ${2:VAR real_SPHyper});"],
    "description": "Sets 'SPHyper' to the current hysteresis value (HYSTER parameter) of the setpoint 'SPNum'."
  },

  "GetSPTime ": {
    "prefix": "GetSPTime",
    "body": ["GetSPTime(${1:int_SPNum}, ${2:VAR DateTime_DT});"],
    "description": "For time of day (TOD) setpoints, sets 'DT' to the current trip time (TIME parameter) of the setpoint 'SPNum'"
  },

  "GetSPDuration ": {
    "prefix": "GetSPDuration",
    "body": ["GetSPDuration(${1:int_SPNum}, ${2:VAR DateTime_DT});"],
    "description": "For time of day (TOD) setpoints, sets 'DT' to the current trip duration (DURATION parameter) of setpoint 'SPNum'"
  },

  "GetSPCaptured ": {
    "prefix": "GetSPCaptured",
    "body": ["GetSPCaptured(${1:int_SPNum}, ${2:VAR real_SPCapture});"],
    "description": "Sets 'SPCapture' to the weight value that satisfied the setpoint 'SPNum'."
  },

  "GetSPCount ": {
    "prefix": "GetSPCount",
    "body": ["GetSPCount(${1:int_SPNum}, ${2:VAR int_SPCount});"],
    "description": "For DINCNT setpoints, sets 'SPCount' to the value specified for setpoint 'SPNum'."
  },

  "GetSPPreCount ": {
    "prefix": "GetSPPreCount",
    "body": ["GetSPPreCount(${1:int_SPNum}, ${2:VAR int_PreCount});"],
    "description": "Sets 'PreCount' to the preact count value (PCOUNT parameter) of DINCNT type setpoint 'SPNum'."
  },

  "SetSPValue ": {
    "prefix": "SetSPValue",
    "body": ["SetSPValue(${1:int_SPNum}, ${2:real_SPValue});"],
    "description": "Sets the value (VALUE parameter) of setpoint 'SPNum' to the value specified by 'SPValue'."
  },

  "SetSPBand ": {
    "prefix": "SetSPBand",
    "body": ["SetSPBand(${1:int_SPNum}, ${2:real_SPBand});"],
    "description": "Sets the band value (BANDVAL parameter) of setpoint 'SPNum' to the value specified by 'SPBand'."
  },

  "SetSPPreact ": {
    "prefix": "SetSPPreact",
    "body": ["SetSPPreact(${1:int_SPNum}, ${2:real_SPPreact});"],
    "description": "Sets the preact value (PREACT parameter) of setpoint 'SPNum' to the value specified by 'SPPreact'."
  },

  "SetSPHyster ": {
    "prefix": "SetSPHyster",
    "body": ["SetSPHyster(${1:int_SPNum}, ${2:real_SPHyster});"],
    "description": "Sets the hysteresis value (HYSTER parameter) of setpoint 'SPNum' to the value specified by 'SPHyster'."
  },

  "SetSPTime ": {
    "prefix": "SetSPTime",
    "body": ["SetSPTime(${1:int_SPNum}, ${2:DateTime_DT});"],
    "description": "For time of day (TOD) setpoints, sets the trip time (TIME parameter) of setpoint 'SPNum' to the value specified by 'DT'."
  },

  "SetSPDuration ": {
    "prefix": "SetSPDuration",
    "body": ["SetSPDuration(${1:int_SPNum}, ${2:DateTime_DT});"],
    "description": "For time of day (TOD) setpoints, sets the trip duration (DURATION parameter) of setpoint SP to the value specified by DT"
  },

  "SetSPCount ": {
    "prefix": "SetSPCount",
    "body": ["SetSPCount(${1:int_SPNum}, ${2:int_SPCount});"],
    "description": "For DINCNT setpoints, sets the VALUE parameter of setpoint 'SPNum' to the value specified by 'SPCount'."
  },
  "SetSPPreCount ": {
    "prefix": "SetSPPreCount",
    "body": ["SetSPPreCount(${1:int_SPNum}, ${2:int_PreCount});"],
    "description": "Sets the preact count value (PCOUNT parameter) of setpoint 'SPNum' to the value specified by 'PreCount'."
  },

  "DisableSP ": {
    "prefix": "DisableSP",
    "body": ["DisableSP(${1:int_SPNum});"],
    "description": "Disables operation of setpoint 'SPNum'"
  },

  "EnableSP ": {
    "prefix": "EnableSP",
    "body": ["EnableSP(${1:int_SPNum});"],
    "description": "Enables operation of setpoint 'SPNum'"
  },

  "SetBatchingMode ": {
    "prefix": "SetBatchingMode",
    "body": ["SetBatchingMode(${1:BatchingMode_BatchMode});"],
    "description": "Sets the batching mode (BATCHNG parameter) to the value specified by 'BatchMode'."
  },

  "GetBatchingMode ": {
    "prefix": "GetBatchingMode",
    "body": ["GetBatchingMode;"],
    "description": "Returns the current batching mode (BATCHNG parameter)."
  },

  "GetCurrentSP ": {
    "prefix": "GetCurrentSP",
    "body": ["GetCurrentSP(${1:VAR int_SPNum});"],
    "description": "Sets 'SPNum' to the number of the current batch setpoint."
  },

  "StartStreaming ": {
    "prefix": "StartStreaming",
    "body": ["StartStreaming(${1:int_Port});"],
    "description": "Starts data streaming for the port number specified by 'Port'. Streaming must be enabled for the port in the indicator configuration."
  },

  "StopStreaming ": {
    "prefix": "StopStreaming",
    "body": ["StopStreaming(${1:int_Port});"],
    "description": "Stops data streaming for the port number specified by 'Port'."
  },

  "Print ": {
    "prefix": "Print",
    "body": ["Print(${1:PrintFormat_PrntFmt});"],
    "description": "Requests a print operation using the print format specified by 'PrntFmt'. Output is sent to the port specified in the print format configuration."
  },

  "SetPrintText ": {
    "prefix": "SetPrintText",
    "body": ["SetPrintText(${1:fmt_num}, ${2:text_string});"],
    "description": "Sets the value of the user-specified format (1-99) to the text specified. The text can be any string of up to 16 characters; if a string of more than 16 characters is specified, nothing is printed"
  },
"ProgramDelay ": {"prefix": "ProgramDelay", "body": ["ProgramDelay(${1:int_Time});"], "description": "ProgramDelay"},
"GetDigIn ": {"prefix": "GetDigIn","body": ["GetDigIn(${1:Slot_Int}, ${2:D_int}, ${3:V_int});"],"description": "GetDigIn"},
"GetDigOut ": {"prefix": "GetDigOut","body": ["GetDigOut(${1:Slot_Int}, ${2:D_int}, ${3:V_int});"],"description": "GetDigOut"},
"SetDigOut ": {"prefix": "SetDigOut","body": ["SetDigOut(${1:Slot_Int}, ${2:D_int}, ${3:V_int});"],"description": "SetDigOut"},
"Abs ": {"prefix": "Abs","body": ["Abs(${1:X_real});"],"description": "Abs"},
"Asc ": {"prefix": "Asc","body": ["Asc(${1:S_String});"],"description": "Asc"},
"Atan ": {"prefix": "Atan","body": ["Atan(${1:X_real});"],"description": "Atan"},
"BitAnd ": {"prefix": "BitAnd","body": ["BitAnd(${1:X_int}, ${2:Y_int});"],"description": "BitAnd"},
"BitOr ": {"prefix": "BitOr","body": ["BitOr(${1:X_int}, ${2:Y_int});"],"description": "BitOr"},
"BitNot ": {"prefix": "BitNot","body": ["BitNot(${1:X_int}, ${2:Y_int});"],"description": "BitNot"},
"BitXor ": {"prefix": "BitXor","body": ["BitXor(${1:X_int}, ${2:Y_int});"],"description": "BitXor"},
"Ceil ": {"prefix": "Ceil","body": ["Ceil(${1:X_real});"],"description": "Ceil"},
"Chr$ ": {"prefix": "Chr$","body": ["Chr$(${1:i_int})"],"description": "Chr$"},
"Cos ": {"prefix": "Cos","body": ["Cos(${1:X_real});"],"description": "Cos"},
"Exp ": {"prefix": "Exp","body": ["Exp(${1:X_real});"],"description": "Exp"},
"Hex$ ": {"prefix": "Hex$","body": ["Hex$(${1:i_int});"],"description": "Hex$"},
"IntegerToString ": {"prefix": "IntegerToString","body": ["IntegerToString(${1:I}, ${2:W})"],"description": "IntegerToString"},
"LCase ": {"prefix": "LCase","body": ["LCase(${1:S});"],"description": "LCase"},
"Left$ ": {"prefix": "Left$","body": ["Left$(${1:S}, ${2:i_int});"],"description": "Left$"},
"Len ": {"prefix": "Len","body": ["Len(${1:S});"],"description": "Len"},
"Log ": {"prefix": "Log","body": ["Log(${1:X_real});"],"description": "Log"},
"Log10 ": {"prefix": "Log10","body": ["Log10(${1:X_real});"],"description": "Log10"},
"Mid$ ": {"prefix": "Mid$","body": ["Mid$(${1:S}, ${2:Start_int}, ${3:Length_int});"],"description": "Mid$"},
"Oct$ ": {"prefix": "Oct$","body": ["Oct$(${1:i_int});"],"description": "Oct$"},
"RealToString ": {"prefix": "RealToString","body": ["RealToString(${1:R}, ${2:W}, ${3:P})"],"description": "RealToString"},
"Right$ ": {"prefix": "Right$","body": ["Right$(${1:S}, ${2:i_int});"],"description": "Right$"},
"Sign ": {"prefix": "Sign","body": ["Sign(${1:X_real});"],"description": "Sign"},
"Sin ": {"prefix": "Sin","body": ["Sin(${1:x_real});"],"description": "Sin"},
"Space$ ": {"prefix": "Space$","body": ["Space$(${1:i_int});"],"description": "Space$"},
"Sqrt ": {"prefix": "Sqrt","body": ["Sqrt(${1:X_real});"],"description": "Sqrt"},
"StringSpaceCompress ": {"prefix": "StringSpaceCompress","body": ["StringSpaceCompress(${1:Region_string});"],"description": "StringSpaceCompress"},
"StringToInteger ": {"prefix": "StringToInteger","body": ["StringToInteger(${1:S});"],"description": "StringToInteger"},
"StringToReal ": {"prefix": "StringToReal","body": ["StringToReal(${1:S});"],"description": "StringToReal"},
"Tan ": {"prefix": "Tan","body": ["Tan(${1:x_real});"],"description": "Tan"},
"UCase$ ": {"prefix": "UCase$","body": ["UCase$(${1:S});"],"description": "UCase$"},
"KeyPress ": {"prefix": "KeyPress","body": ["KeyPress(${1:key_Keys});"],"description": "KeyPress"},
"LockKey ": {"prefix": "LockKey","body": ["LockKey(${1:key_Keys});"],"description": "LockKey"},
"GetConsecNum ": {"prefix": "GetConsecNum","body": ["GetConsecNum;"],"description": "GetConsecNum"},
"SetConsecNum ": {"prefix": "SetConsecNum","body": ["SetConsecNum(${1:Value_int});"],"description": "SetConsecNum"},
"SetUID ": {"prefix": "SetUID","body": ["SetUID(${1:newid_string});"],"description": "SetUID"},
"UnlockKey ": {"prefix": "UnlockKey","body": ["UnlockKey(${1:key_Keys});"],"description": "UnlockKey"},
"ResetTimer ": {"prefix": "ResetTimer","body": ["ResetTimer(${1:T_int});"],"description": "ResetTimer"},
"SetTimer ": {"prefix": "SetTimer","body": ["SetTimer(${1:T_int}, ${2:Value_int});"],"description": "SetTimer"},
"SetTimerMode ": {"prefix": "SetTimerMode","body": ["SetTimerMode(${1:T_int}, ${2:Mode_timermode});"],"description": "SetTimerMode"},
"SetTimerDigOut ": {"prefix": "SetTimerDigOut","body": ["SetTimerDigOut(${1:T_int}, ${2:S_int}, ${3:D_int});"],"description": "SetTimerDigOut"},
"StartTimer ": {"prefix": "StartTimer","body": ["StartTimer(${1:T_int});"],"description": "StartTimer"},
"StopTimer ": {"prefix": "StopTimer","body": ["StopTimer(${1:T_int});"],"description": "StopTimer"},
"DisplayStatus ": {"prefix": "DisplayStatus","body": ["DisplayStatus(${1:Msg_string});"],"description": "DisplayStatus"},
"PromptUser ": {"prefix": "PromptUser","body": ["PromptUser(${1:Msg_string});"],"description": "PromptUser"},
"SetEntry ": {"prefix": "SetEntry","body": ["SetEntry(${1:S_string});"],"description": "SetEntry"},
"FileOpen ": {"prefix": "FileOpen","body": ["FileOpen(${1:FileName_string}, ${2:Device}, ${3:FileAccessMode});"],"description": "FileOpen"},
"USBFileOpen ": {"prefix": "USBFileOpen","body": ["USBFileOpen(${1:FileName_string}, ${2:FileAccessMode});"],"description": "USBFileOpen"},
"FileExists ": {"prefix": "FileExists","body": ["FileExists(${1:FileName_string}, ${2:FileDevice});"],"description": "FileExists"},
"USBFileExists ": {"prefix": "USBFileExists","body": ["USBFileExists(${1:FileName_string});"],"description": "USBFileExists"},
"FileDelete ": {"prefix": "FileDelete","body": ["FileDelete(${1:FileName_string}, ${2:FileDevice});"],"description": "FileDelete"},
"USBFileDelete ": {"prefix": "USBFileDelete","body": ["USBFileDelete(${1:FileName_string});"],"description": "USBFileDelete"},
"SetFileTermin ": {"prefix": "SetFileTermin","body": ["SetFileTermin(${1:FileLineTermination});"],"description": "SetFileTermin"},
"SysCodeToString ": {"prefix": "SysCodeToString","body": ["SysCodeToString(${1:Code_SysCode});"],"description": "SysCodeToString"},
"ChartInit ": {"prefix": "ChartInit","body": ["ChartInit(${1:widget_num}, ${2:fillColor}, ${3:lineColor}, ${4:pointColor}, ${5:maxPoints});"],"description": "ChartInit"},
"ChartPlot ": {"prefix": "ChartPlot","body": ["ChartPlot(${1:widget_num}, ${2:label}, ${3:value});"],"description": "ChartPlot"},
"ChartSetAnimation ": {"prefix": "ChartSetAnimation","body": ["ChartSetAnimation(${1:widget_num});"],"description": "ChartSetAnimation"},
"ChartRender ": {"prefix": "ChartRender","body": ["ChartRender(${1:widget_num});"],"description": "ChartRender"},
"ChartInsertToExisting ": {"prefix": "ChartInsertToExisting","body": ["ChartInsertToExisting(${1:widget_num}, ${2:label}, ${3:value});"],"description": "ChartInsertToExisting"},
"ChartInitStatic ": {"prefix": "ChartInitStatic", "body": ["ChartInitStatic(${1:int_Widgetno}, ${2:string_fillColor}, ${3:string_lineColor}, ${4:string_pointColor}, ${5:int_maxPoints});"], "description": "Creates a larger static chart"},
"ChartClear ": {"prefix": "ChartClear", "body": ["ChartClear(${1int_WidgetNo});"], "description" : "Clears Static Chart to repopulate"},
"ChartSetPointSize ": {"prefix": "ChartSetPointSize", "body": ["ChartSetPointSize(${1:int_Widgetno}, ${2:int_size(1-5)});"], "description": "Radius in pixels of chart point"},
"ReadLn ": {"prefix": "ReadLn","body": ["ReadLn(${1:varD_string});"],"description": "ReadLn"},
"BusyShow ": {"prefix": "BusyShow", "body":["BusyShow;"], "description": "Shows Busy Symbol On Screen"},
"BusyHide ": {"prefix": "BusyHide", "body":["BusyHide;"], "description": "Removes Busy Symbol On Screen"},
"SetupStartTimer": {"prefix": "SetupStartTimer", "body":["SetupStartTimer(${1:int_TimerNum}, ${2:int_Time}, ${3:timerType});"], "description": "RLWS iRite Template procedure to setup and start a timer"},
"SubmitData": {"prefix": "SubmitData", "body":["SubmitData(${1:int_ScaleNum}, ${2:real_Wgt}, ${3:mode_GrossNet}, ${4:unitType_units}, ${5:real_Tare});"], "description": "Sets data for programmable scale"},
"SubmitDSPData": {"prefix": "SubmitDSPData", "body":["SubmitData(${1:int_ScaleNum}, ${2:real_Wgt}, ${3:string_Units}, ${4:DecimalType_dp});"], "description": "Sets data for programmable scale"}
}