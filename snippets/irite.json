{
  "Begin end": {
    "prefix": "begin",
    "body":  [
      "begin\r",
      "\t$1\r",
      "end;\r"
      ],
    "description": "Begin end"
  },

  "SetMenuBarColor": {
    "prefix": "SetMenuBarColor",
    "body":[
      "SetMenuBarColor(${1:string_Color});"
    ],
    "description": "Set color of the menu bar"
  },

  "block comment": {
    "prefix": "blockcomment",
    "body": [
      "----------------------------------------------------------------------------",
      "--",
      "--\t$1",
      "--",
      "----------------------------------------------------------------------------"
    ],
    "description": "Block Comment"
  },

  "SetBargraphLevel": {
    "prefix": "SetBargraphLevel",
    "body": [
      "SetBargraphLevel(${1:int_WidgetNum}, ${2:int_Percentage});"
    ],
    "description": "Sets referenced bargraph to given percentage"
  },

  "handler": {
    "prefix": "handler",
    "body": [
      "handler ${1:HandlerName};",
      "begin",
      "\t$0",
      "end;"
    ],
    "description": "Handler template."
    },

  "else end": {
    "prefix": "else",
    "body": [
      "else",
      "\t$0",
      "end if;"
    ],
    "description": "else end"
  },

  "function end": {
    "prefix": "function",
    "body": [
      "function ${1:MyFunction}(${2:params}:${3:integer};",
      "begin",
      "\t$0",
      "end;"
    ],
    "description": "function template with begin and end"
  },

  "if (no begin end)": {
    "prefix": "if",
    "body": [
      "if ${1:True} then",
      "\t$0"
    ],
    "description": "if (no begin end)"
  },

  "if end if": {
    "prefix": "if end if",
    "body": [
      "if ${1:True} then",
      "\t$0",
      "end if;"
    ],
    "description": "if statement with end if"
  },

  "if else (no begin end)": {
    "prefix": "if else",
    "body": [
      "if ${1:True} then",
      "\t${2:then code here}",
      "else",
      "\t${3:else code here}"
    ],
    "description": "if else (no begin end)"
  },

  "if else end if": {
    "prefix": "if else end if",
    "body": [
      "if ${1:True} then",
      "\t${2:then code here}",
      "else",
      "\t${3:else code here}",
      "end if;"
    ],
    "description": "if else end if"
  },

  "SelectScreen": {
    "prefix": "SelectScreen",
    "body":[
      "SelectScreen(${1:int_ScreenNumber});"
    ],
    "description": "Select Active Screen"
  },

  "EnableHandler": {
    "prefix": "EnableHandler",
    "body":[
      "EnableHandler(${1:string_HandlerName});"
    ],
    "description": "Enable referenced handler"
  },

  "DisableHandler": {
    "prefix": "DisableHandler",
    "body":[
      "DisableHandler(${1:string_HandlerName});"
    ],
    "description": "Disable referenced handler "
  },

  "procedure": {
    "prefix": "procedure",
    "body": [
      "procedure ${1:MyProcedure};",
      "begin",
      "\t$0",
      "end;"
    ],
    "description": "procedure template"
  },

  "FindFirst": {
    "prefix": "FindFirst",
    "body": [
      "FindFirst(${1:db_Database}_${2:string_Field})"
    ],
    "description": "Finds the first record in the referenced database that matches the contents of <Database> column <field>."
  },

  "FindNext": {
    "prefix": "FindNext",
    "body": [
      "FindFirst(${1:db_Database}_${2:string_Field})"
    ],
    "description": "Finds the next record in the referenced database that matches the contents of <Database> column <field>."
  },

  "FindLast": {
    "prefix": "FindLast",
    "body": [
      "FindFirst(${1:db_Database}_${2:string_Field})"
    ],
    "description": "Finds the last record in the referenced database that matches the contents of <Database> column <field>."
  },

  "GetGross ": {
    "prefix": "GetGross",
    "body": [
      "GetGross(${1:int_ScaleNum}, ${2:units_Units}, ${3:VAR real_GrossWgt});"
    ],
    "description": "Assigns current gross weight in provide scale and units to the 3rd parameter"
  },

  "GetNet ": {
    "prefix": "GetNet",
    "body": [
      "GetNet(${1:int_ScaleNum}, ${2:units_Units}, ${3:VAR real_NetWgt});"
    ],
    "description": "Assigns current net weight in provide scale and units to the 3rd parameter"
  },

  "GetTare ": {
    "prefix": "GetTare",
    "body": [
      "GetTare(${1:int_ScaleNum}, ${2:units_Units}, ${3:VAR real_TareWgt});"
    ],
    "description": "Assigns current tare weight in provide scale and units to the 3rd parameter"
  },

  "GetFilteredCount ": {
    "prefix": "GetFilteredCount",
    "body": [
      "GetFilteredCount(${1:int_ScaleNum}, ${2:VAR int_FilteredCount});"
    ],
    "description": "Sets FilteredCount to current filtered A/D count for scale ScaleNum"
  },

  "GetRawCount ": {
    "prefix": "GetRawCount",
    "body": [
      "GetRawCount(${1:int_ScaleNum}, ${2:VAR int_RawCount});"
    ],
    "description": "Assigns raw A/D count for ScaleNum to RawCount"
  },

  "SetImageWidgetPath ": {
    "prefix": "SetImageWidgetPath",
    "body": [
        "SetImageWidgetPath(${1:int_Widget}, ${2:string_fileName});"
    ],
    "description": "Displays image widget as a BMP or PNG file. File needs to be stored as on a micro SD card and stored in a folder called sdimages"
  },

  "DebugSerial": {
    "prefix": "Debug",
    "body": ["WriteLn(g_iDebug, ${1:int_lineNumber} ${2:string_Message});"],
    "description": "Debug Serial (requires adding cmd32 handler with code to actually produce debug)"
  },

  "DebugTCP": {
    "prefix": "Debug",
    "body": ["WriteOutLn(g_sDebug, ${1:int_lineNumber} ${2:string_Message});"],
    "description": "Debug TCP (requires adding handler with code to actually produce debug)"

  },

  "WriteLn": {
    "prefix": "WriteLn",
    "body": [
    "WriteLn(${1:int_Port}, ${2:string_message})"

      ],

    "description": "Write message out Port with CR/LF at the end"
    },

  "Write": {
    "prefix": "Write",
    "body": [
    "WriteLn(${1:int_Port}, ${2:string_message})"

      ],

    "description": "Write message out Port without CR/LF at the end"
  },

  "WriteOutLn": {
    "prefix": "WriteOutLn",
    "body": [
      "WriteOutLn(TCPC${1:int_Port}, ${2:string_message});"

      ],
    "description": "Write message out TCPC(Port) with CR/LF at the end "
  },

  "WriteOut": {
    "prefix": "WriteOut",
    "body": [
      "WriteOutLn(TCPC${1:int_Port}, ${2:string_message});"

      ],
    "description": "Write message out TCPC(Port) without CR/LF at the end "
  },

  "While Loop": {
    "prefix": "while",
    "body": [
      "while ${string_condition}",
      "loop",
      "\t$0",
      "end loop;"
    ],
    "description": "While Loop"
  },

  "Left$": {
    "prefix": "Left$",
    "body": [
      "Left$(${1:string_Source}, ${2:int_Len})"
    ],
    "description": "Returns a string containing the leftmost 'Len' characters of string 'Source'. If 'Len' is greater than the length of 'Source', the function returns a copy of 'Source'."
  },

  "SetLabelText": {
    "prefix": "SetLabelText",
    "body": [
        "SetLabelText(${1:int_LabelID}, ${2:string_Message});"
    ],
    "description": "Set the text of label widget 'LabelID' to 'Message'"
  },

  "SetWidgetColor": {
    "prefix": "SetWidgetColor",
    "body": [
        "SetWidgetColor(${1:int_WidgetID}, ${2:string_Color});"
      ],
    "description": "Sets the color of widget 'WidgetID' to 'Color'. A set widget color uses HTML RGB style."

  },

"SetBGColor": {
  "prefix": "SetBGColor",
  "body": [
      "SetBGColor(${1:color_Background}, ${2:color_Text});"
    ],
  "description": "Sets the text and background color (name or HTML RGB Style)"

},

"SetWidgetVisibility": {
  "prefix": "SetWidgetVisibility",
  "body": [
    "SetWidgetVisibility(${1:int_WidgetID}, ${2:VonVoff_value};"
  ],
  "description": "Sets the visibility state of widget 'WidgetID' to 'Value' (vOn or Voff)."
},

"EventWidget": {
  "prefix": "EventWidget",
  "body": [
    "EventWidget"
  ],
  "description": "System Variable that contains value of the widget number that triggered event (typically WidgetClicked)"
},

"EventKey": {
    "prefix": "EventKey",
    "body": [
      "EventKey"
    ],
    "description": "EventKey"
  },

  "For Loop": {
    "prefix": "for loop simple",
    "body": [
      "for i := 1 to ${1:int_Count}",
      "loop",
      "\t$2",
      "end loop;"
    ],
    "description": "For Loop 1 to 'Count'"
  },

  "for loop": {
    "prefix": "for loop custom",
    "body": [
      "for ${1:i} := ${2:1} to ${3:max}",
      "loop",
      "\t$0",
      "end loop;"
    ],
    "description": "for loop customize iterator, starting value and ending value"
  },

  "IfElse": {
    "prefix": "if else",
    "body": [
      "if ${1:string_command} then",
      "\t$2",
      "else",
      "\t$3",
      "end if;"
    ],
    "description": "if else end if;"
  },

  "Separator Line": {
    "prefix": "Dashed Line",
    "body": [
        "-------------------------------------------------------------------------------------"
    ],
    "description": "Dashes"
  },

  "SetScaleSymbols": {
    "prefix": "SetScaleSymbols",
    "body": [
      "SetScaleSymbols(${1:string_BlackWhite});"
    ],
    "Description": "Sets the scaleâ€™s symbols to black or white"
  },

  "SetSymbolState ": {
    "prefix": "SetSymbolState",
    "body":["SetSymbolState(${1:int_widgetNum}, ${2:int_state});"],
    "description": "Sets the state of symbol widget 'widgetNum' to 'state'.  The widget state determines the variant of the widget symbol displayed."
  },

  "GetCapacity ": {
    "prefix": "GetCapacity",
    "body": [
      "GetCapacity(${1:int_ScaleNum}, ${2:units_Units}, ${3:VAR real_ScaleCapacity});"
    ],
    "description": "Sets 'ScaleCapacity' to the configured capacity for scale 'ScaleNum' and units 'Units'."
  },

  "GetMV ": {
    "prefix": "GetMV",
    "body": ["GetMV(${1:int_ScaleNum}, ${2:VAR real_Millivolts});"],
    "description": "Returns the 'Millivolts' reading for a scale."
  },

  "GetGrads ": {
    "prefix": "GetGrads",
    "body": ["GetGrads(${1:int_ScaleNum}, ${2:VAR int_Grads});"],
    "description": "Sets 'Grads' to the configured grad value of scale 'ScaleNum'."
  },

  "GetCountBy ": {
    "prefix": "GetCountBy",
    "body": ["GetCountBy(${1:int_ScaleNum}, ${2:units_Units}, ${3:VAR real_CountBy});"],
    "description": "Sets 'CountBy' to the real count-by value on scale 'ScaleNum', in units 'Units'."
  },

  "SetAlgOut ": {
    "prefix": "SetAlgOut",
    "body": ["SetAlgOut(${1:int_SlotNum}, ${2:real_Pct});"],
    "description": "Sets the analog output card in slot 'SlotNum' to the percentage 'Pct'. Negative 'Pct' values are set to zero; values greater than 100.0 are set to 100.0"
  },

  "getLCCC ": {
    "prefix": "getLCCC",
    "body": ["getLCCC(${1:int_ScaleNum}, ${2:VAR int_LCCC});"],
    "description": "Sets 'LCCC' to the calibrated load cell count at capacity for scale 'ScaleNum'"
  },

  "getLCCD ": {
    "prefix": "getLCCD",
    "body": ["getLCCD(${1:int_ScaleNum}, ${2:VAR int_LCCD});"],
    "description": "Sets 'LCCD' to the calibrated deadload count for scale 'ScaleNum'"
  },

  "getLCCW ": {
    "prefix": "getLCCW",
    "body": ["getLCCW(${1:int_ScaleNum}, ${2:VAR int_SpanCount});"],
    "description": "Sets 'SpanCount' to the calibrated span count for scale 'ScaleNum'."
  },

  "GetWVal ": {
    "prefix": "GetWVal",
    "body": ["GetWVal(${1:int_ScaleNum}, ${2:VAR TestWeightValue});"],
    "description": "Sets 'TestWeightValue' to the configured WVAL (test weight value) for scale 'ScaleNum'."
  },

  "GetZeroCount ": {
    "prefix": "GetZeroCount",
    "body": ["GetZeroCount(${1:int_ScaleNum}, ${2:VAR int_ZeroCount});"],
    "description": "Sets 'ZeroCount' to the acquired zero count for scale 'ScaleNum'"
  },

  "PulseCount ": {
    "prefix": "PulseCount",
    "body": ["PulseCount(${1:int_SlotNum}, ${2:VAR int_Count});"],
    "description": "Sets 'Count' to the current pulse count of the pulse input card in slot 'SlotNum'."
  },

  "ClearPulseCount ": {
    "prefix": "ClearPulseCount",
    "body": ["ClearPulseCount(${1:int_ScaleNum};"],
    "description": "Sets the pulse count of the pulse input card in slot 'SlotNum' to zero"
  },

  "AcquireTare ": {
    "prefix": "AcquireTare",
    "body": ["AcquireTare(${1:int_ScaleNum});"],
    "description": "Acquires a pushbutton tare from scale 'ScaleNum'"
  },

  "SetTare ": {
    "prefix": "SetTare",
    "body": ["SetTare(${1:int_ScaleNum}, ${2:unit_Units}, ${3:real_TareWeight});"],
    "description": "Sets the tare weight for 'ScaleNum' to 'TareWeight' in 'Units'"
  },

  "GetTareType ": {
    "prefix": "GetTareType",
    "body": ["GetTareType(${1:int_ScaleNum}, ${2:TareType_TT});"],
    "description": "Sets 'TT' to indicate type of tare currently on scale 'ScaleNum'"
  },

  "ClearTare ": {
    "prefix": "ClearTare",
    "body": ["ClearTare(${1:int_ScaleNum});"],
    "description": "Removes the tare associated with scale 'ScaleNum' and sets the tare type associated with the scale to NoTare."
  },

  "GetROC ": {
    "prefix": "GetROC",
    "body": ["GetROC(${1:int_ScaleNum}, ${2:real_ROC});"],
    "description": "Sets 'ROC' to the current rate-of-change value of scale 'ScaleNum'"
  },

  "GetAccum ": {
    "prefix": "GetAccum",
    "body": ["GetAccum(${1:int_ScaleNum}, ${2:unit_Units}, ${3:real_AccumWeight});"],
    "description": "Sets 'AccumWeight' to the value of the accumulator associated with scale 'ScaleNum', in the units specified by 'Units'."
  },

  "SetAccum ": {
    "prefix": "SetAccum",
    "body": ["SetAccum(${1:int_ScaleNum}, ${2:unit_Units}, ${3:real_AccumWeight});"],
    "description": "Sets the value of the accumulator associated with scale 'ScaleNum' to weight 'AccumWeight', in units specified by 'Units'."
  },

  "GetAvgAccum ": {
    "prefix": "GetAvgAccum",
    "body": ["GetAvgAccum(${1:int_ScaleNum}, ${2:units_Units}, ${3:real_AvgAccumWeight});"],
    "description": "Sets 'AvgAccumWeight' to the average accumulator value associated with scale 'ScaleNum', in the units specified by 'Units', since the accumulator was last cleared."
  },

  "GetAccumCount ": {
    "prefix": "GetAccumCount",
    "body": ["GetAccumCount(${1:int_ScaleNum}, ${2:int_AccumCount});"],
    "description": "Sets 'AccumCount' to the number of accumulations performed for scale 'ScaleNum' since its accumulator was last cleared"
  },

  "GetAccumDate ": {
    "prefix": "GetAccumDate",
    "body": ["GetAccumDate(${1:int_ScaleNum}, ${2:VAR string_Date});"],
    "description": "Sets 'Date' to the date of the most recent accumulation performed by scale 'ScaleNum'."
  },

  "GetAccumTime ": {
    "prefix": "GetAccumTime",
    "body": ["GetAccumTime(${1:int_ScaleNum}, ${2:VAR string_Time});"],
    "description": "Sets 'Time' to the time of the most recent accumulation performed by scale 'ScaleNum'"
  },

  "ClearAccum ": {
    "prefix": "ClearAccum",
    "body": ["ClearAccum(${1:int_ScaleNum});"],
    "description": "Sets the value of the accumulator for scale 'ScaleNum' to zero."
  },

  "SelectScale ": {
    "prefix": "SelectScale",
    "body": ["SelectScale(${1:int_ScaleNum});"],
    "description": "Sets scale 'ScaleNum' as the current, active scale."
  },

  "GetMode ": {
    "prefix": "GetMode",
    "body": ["GetMode(${1:int_ScaleNum}, ${2:VAR mode_Mode});"],
    "description": "Sets 'Mode' to the value representing the current display mode for scale 'ScaleNum'"
  },

  "GetUnits ": {
    "prefix": "GetUnits",
    "body": ["GetUnits(${1:int_ScaleNum}, ${2:VAR units_Units});"],
    "description": "Sets 'Units' to the value representing the current display units for scale 'ScaleNum'."
  },

  "GetUnitsString ": {
    "prefix": "GetUnitsString",
    "body": ["GetUnitsString(${1:int_ScaleNum}, ${2:units_Units}, ${3:VAR string_UnitsString});"],
    "description": "Sets 'UnitsString' to the text string representing the current display units for scale 'ScaleNum'."
  },

  "InCOZ ": {
    "prefix": "InCOZ",
    "body": ["InCOZ(${1:int_ScaleNum}, ${2:VAR int_InCoz});"],
    "description": "Sets 'InCoz' to a non-zero value if scale 'ScaleNum' is within 0.25 grads of gross zero. If the condition is not met, 'InCoz' is set to zero."
  },

  "InRange ": {
    "prefix": "InRange",
    "body": ["InRange(${1:int_ScaleNum}, ${2:VAR int_InRange});"],
    "description": "Sets 'InRange' to zero value if scale 'ScaleNum' is in an overload or underload condition. Otherwise, 'InRange' is set to a non-zero value."
  },

  "InMotion ": {
    "prefix": "InMotion",
    "body": ["InMotion(${1:scaleNum}, ${2:V});"],
    "description": "Sets 'InMotion' to a non-zero value if scale 'ScaleNum' is in motion. Otherwise, 'InMotion' is set to zero."
  },

  "SetMode ": {
    "prefix": "SetMode",
    "body": ["SetMode(${1:int_ScaleNum}, ${2:mode_Mode});"],
    "description": "Sets the current display mode on scale 'ScaleNum' to 'Mode'."
  },

  "SetUnits ": {
    "prefix": "SetUnits",
    "body": ["SetUnits(${1:int_ScaleNum}, ${2:units_Units});"],
    "description": "Sets the current display units on scale 'ScaleNum' to 'Units'."
  },

  "ZeroScale ": {
    "prefix": "ZeroScale",
    "body": ["ZeroScale(${1:int_ScaleNum});"],
    "description": "Performs a gross zero scale operation for 'ScaleNum'."
  },

  "GetSPValue ": {
    "prefix": "GetSPValue",
    "body": ["GetSPValue(${1:int_SPNum}, ${2:VAR real_SPValue});"],
    "description": "Sets 'SPValue' to the current value (VALUE parameter) of the setpoint 'SPNum'"
  },

  "GetSPBand ": {
    "prefix": "GetSPBand",
    "body": ["GetSPBand(${1:int_SPNum}, ${2:VAR real_SPBand});"],
    "description": "Sets 'SPBand' to the current band value (BANDVAL parameter) of the setpoint 'SPNum'."
  },

  "GetSPPreact ": {
    "prefix": "GetSPPreact",
    "body": ["GetSPPreact(${1:int_SPNum}, ${2:VAR real_SPPreact});"],
    "description": "Sets 'SPPreact' to the current preact value (PREACT parameter) of the setpoint 'SPNum'."
  },

  "GetSPHyster ": {
    "prefix": "GetSPHyster",
    "body": ["GetSPHyster(${1:int_SPNum}, ${2:VAR real_SPHyper});"],
    "description": "Sets 'SPHyper' to the current hysteresis value (HYSTER parameter) of the setpoint 'SPNum'."
  },

  "GetSPTime ": {
    "prefix": "GetSPTime",
    "body": ["GetSPTime(${1:int_SPNum}, ${2:VAR DateTime_DT});"],
    "description": "For time of day (TOD) setpoints, sets 'DT' to the current trip time (TIME parameter) of the setpoint 'SPNum'"
  },

  "GetSPDuration ": {
    "prefix": "GetSPDuration",
    "body": ["GetSPDuration(${1:int_SPNum}, ${2:VAR DateTime_DT});"],
    "description": "For time of day (TOD) setpoints, sets 'DT' to the current trip duration (DURATION parameter) of setpoint 'SPNum'"
  },

  "GetSPCaptured ": {
    "prefix": "GetSPCaptured",
    "body": ["GetSPCaptured(${1:int_SPNum}, ${2:VAR real_SPCapture});"],
    "description": "Sets 'SPCapture' to the weight value that satisfied the setpoint 'SPNum'."
  },

  "GetSPCount ": {
    "prefix": "GetSPCount",
    "body": ["GetSPCount(${1:int_SPNum}, ${2:VAR int_SPCount});"],
    "description": "For DINCNT setpoints, sets 'SPCount' to the value specified for setpoint 'SPNum'."
  },

  "GetSPPreCount ": {
    "prefix": "GetSPPreCount",
    "body": ["GetSPPreCount(${1:int_SPNum}, ${2:VAR int_PreCount});"],
    "description": "Sets 'PreCount' to the preact count value (PCOUNT parameter) of DINCNT type setpoint 'SPNum'."
  },

  "SetSPValue ": {
    "prefix": "SetSPValue",
    "body": ["SetSPValue(${1:int_SPNum}, ${2:real_SPValue});"],
    "description": "Sets the value (VALUE parameter) of setpoint 'SPNum' to the value specified by 'SPValue'."
  },

  "SetSPBand ": {
    "prefix": "SetSPBand",
    "body": ["SetSPBand(${1:int_SPNum}, ${2:real_SPBand});"],
    "description": "Sets the band value (BANDVAL parameter) of setpoint 'SPNum' to the value specified by 'SPBand'."
  },

  "SetSPPreact ": {
    "prefix": "SetSPPreact",
    "body": ["SetSPPreact(${1:int_SPNum}, ${2:real_SPPreact});"],
    "description": "Sets the preact value (PREACT parameter) of setpoint 'SPNum' to the value specified by 'SPPreact'."
  },

  "SetSPHyster ": {
    "prefix": "SetSPHyster",
    "body": ["SetSPHyster(${1:int_SPNum}, ${2:real_SPHyster});"],
    "description": "Sets the hysteresis value (HYSTER parameter) of setpoint 'SPNum' to the value specified by 'SPHyster'."
  },

  "SetSPTime ": {
    "prefix": "SetSPTime",
    "body": ["SetSPTime(${1:int_SPNum}, ${2:DateTime_DT});"],
    "description": "For time of day (TOD) setpoints, sets the trip time (TIME parameter) of setpoint 'SPNum' to the value specified by 'DT'."
  },

  "SetSPDuration ": {
    "prefix": "SetSPDuration",
    "body": ["SetSPDuration(${1:int_SPNum}, ${2:DateTime_DT});"],
    "description": "For time of day (TOD) setpoints, sets the trip duration (DURATION parameter) of setpoint SP to the value specified by DT"
  },

  "SetSPCount ": {
    "prefix": "SetSPCount",
    "body": ["SetSPCount(${1:int_SPNum}, ${2:int_SPCount});"],
    "description": "For DINCNT setpoints, sets the VALUE parameter of setpoint 'SPNum' to the value specified by 'SPCount'."
  },
  "SetSPPreCount ": {
    "prefix": "SetSPPreCount",
    "body": ["SetSPPreCount(${1:int_SPNum}, ${2:int_PreCount});"],
    "description": "Sets the preact count value (PCOUNT parameter) of setpoint 'SPNum' to the value specified by 'PreCount'."
  },

  "DisableSP ": {
    "prefix": "DisableSP",
    "body": ["DisableSP(${1:int_SPNum});"],
    "description": "Disables operation of setpoint 'SPNum'"
  },

  "EnableSP ": {
    "prefix": "EnableSP",
    "body": ["EnableSP(${1:int_SPNum});"],
    "description": "Enables operation of setpoint 'SPNum'"
  },

  "SetBatchingMode ": {
    "prefix": "SetBatchingMode",
    "body": ["SetBatchingMode(${1:BatchingMode_BatchMode});"],
    "description": "Sets the batching mode (BATCHNG parameter) to the value specified by 'BatchMode'."
  },

  "GetBatchingMode ": {
    "prefix": "GetBatchingMode",
    "body": ["GetBatchingMode;"],
    "description": "Returns the current batching mode (BATCHNG parameter)."
  },

  "GetCurrentSP ": {
    "prefix": "GetCurrentSP",
    "body": ["GetCurrentSP(${1:VAR int_SPNum});"],
    "description": "Sets 'SPNum' to the number of the current batch setpoint."
  },

  "StartStreaming ": {
    "prefix": "StartStreaming",
    "body": ["StartStreaming(${1:int_Port});"],
    "description": "Starts data streaming for the port number specified by 'Port'. Streaming must be enabled for the port in the indicator configuration."
  },

  "StopStreaming ": {
    "prefix": "StopStreaming",
    "body": ["StopStreaming(${1:int_Port});"],
    "description": "Stops data streaming for the port number specified by 'Port'."
  },

  "Print ": {
    "prefix": "Print",
    "body": ["Print(${1:PrintFormat_PrntFmt});"],
    "description": "Requests a print operation using the print format specified by 'PrntFmt'. Output is sent to the port specified in the print format configuration."
  },

  "SetPrintText ": {
    "prefix": "SetPrintText",
    "body": ["SetPrintText(${1:int_fmtNum}, ${2:string_Text});"],
    "description": "Sets the value of the user-specified format (1-99) to the text specified. The text can be any string of up to 16 characters; if a string of more than 16 characters is specified, nothing is printed"
  },

  "ProgramDelay ": {
    "prefix": "ProgramDelay", 
    "body": ["ProgramDelay(${1:int_Time});"], 
    "description": "Pauses the user program for the specified time. Delay time is entered in 0.01-second intervals (1/100 seconds, 100 = 1 second)."
  },

  "GetDigIn ": {
    "prefix": "GetDigIn",
    "body": ["GetDigIn(${1:int_Slot}, ${2:int_bit}, ${3:VAR int_value});"],
    "description": "Sets 'value' to the value of the digital input assigned to 'slot', 'bit'. GetDigin sets 'value' to 0 if the input is on, to 1 if the input is off. Note that the values returned are the reverse of those used when setting an output with the SetDigout function. GetDigin can monitor any digital I/O point that is not configured as OFF or OUTPUT"
  },

  "GetDigOut ": {
    "prefix": "GetDigOut",
    "body": ["GetDigOut(${1:int_Slot}, ${2:int_bit}, ${3:VAR int_value});"],
    "description": "Sets 'value' of the digital output assigned to 'slot', 'bit'. GetDigout sets 'value' to 0 if the output is off, to 1 if the output is on."
  },

  "SetDigOut ": {
    "prefix": "SetDigOut",
    "body": ["SetDigOut(${1:int_Slot}, ${2:int_bit}, ${3:int_value});"],
    "description": "Sets value of the digital output assigned to 'slot', 'bit', to 'value'. Set 'value' to 1 to turn the specified output on; set 'value' to 0 to turn the output off."
  },

  "Abs ": {
    "prefix": "Abs",
    "body": ["Abs(${1:real_x});"],
    "description": "Returns the absolute value of 'x'."
  },

  "Asc ": {
    "prefix": "Asc",
    "body": ["Asc(${1:string_S});"],
    "description": "Returns the ASCII value of the first character of string 'S'. If 'S' is an empty string, the value returned is 0."
  },

  "Atan ": {
    "prefix": "Atan",
    "body": ["Atan(${1:real_x});"],
    "description": "Returns a value between â€“pi/2 and pi/2, representing the arctangent of 'x' in radians."
  },

  "BitAnd ": {
    "prefix": "BitAnd",
    "body": ["BitAnd(${1:int_x}, ${2:int_y});"],
    "description": "Returns the bit-wise AND result of 'X' and 'Y'"
  },

  "BitOr ": {
    "prefix": "BitOr",
    "body": ["BitOr(${1:int_x}, ${2:int_y});"],
    "description": "Returns the bit-wise OR result of 'X' and 'Y'"
  },

  "BitNot ": {
    "prefix": "BitNot",
    "body": ["BitNot(${1:int_x}, ${2:int_y});"],
    "description": "Returns the bit-wise NOT result of 'X' and 'Y'"
  },

  "BitXor ": {
    "prefix": "BitXor",
    "body": ["BitXor(${1:int_x}, ${2:int_y});"],
    "description": "Returns the bit-wise exclusive OR (XOR) result of 'X' and 'Y'"
  },
  "Ceil ": {
    "prefix": "Ceil",
    "body": ["Ceil(${1:real_x});"],
    "description": "Returns the smallest integer greater than or equal to x."
  },

  "Chr$ ": {
    "prefix": "Chr$",
    "body": ["Chr$(${1:int_x})"],
    "description": "Returns a one-character string containing the ASCII character represented by 'x'."
  },

  "Cos ": {
    "prefix": "Cos",
    "body": ["Cos(${1:real_x});"],
    "description": "Returns the cosine of x. x must be specified in radians."
  },

  "Exp ": {
    "prefix": "Exp",
    "body": ["Exp(${1:real_x});"],
    "description": "Returns the value of e^x"
  },

  "Hex$ ": {
    "prefix": "Hex$",
    "body": ["Hex$(${1:int_i});"],
    "description": "Returns an eight-character hexadecimal string equivalent to 'I'."
  },

  "IntegerToString ": {
    "prefix": "IntegerToString",
    "body": ["IntegerToString(${1:int_I}, ${2:int_minLength})"],
    "description": "Returns a string representation of the integer 'I' with a minimum length of 'minLength'. If 'minLength' is less than zero, zero is used as the minimum length. If minLength is greater than 100, 100 is used as the minimum length."
  },

  "LCase$ ": {
    "prefix": "LCase",
    "body": ["LCase(${1:string_S});"],
    "description": "Returns the string 'S' with all upper-case letters converted to lower case."
  },

  "Left$ ": {
    "prefix": "Left$",
    "body": ["Left$(${1:string_S}, ${2:int_i});"],
    "description": "Returns a string containing the leftmost 'left' characters of string 'S'. If 'left' is greater than the length of 'S', the function returns a copy of 'S'."
  },

  "Len ": {
    "prefix": "Len",
    "body": ["Len(${1:string_S});"],
    "description": "Returns the length (number of characters) of string 'S'."
  },

  "Log ": {
    "prefix": "Log",
    "body": ["Log(${1:real_x});"]
    ,"description": "Returns the value of log e(x)."
  },

  "Log10 ": {
    "prefix": "Log10",
    "body": ["Log10(${1:real_x});"],
    "description": "Returns the value of log 10(x)."
  },

  "Mid$ ": {
    "prefix": "Mid$",
    "body": ["Mid$(${1:string_S}, ${2:int_Start}, ${3:int_Length});"]
    ,"description": "Returns a number of characters (specified by 'length') from string 's', beginning with the character specified by 'start'. If 'start' is greater than the string length, the result is an empty string. If 'start' + 'length' is greater than the length of S, the returned value contains the characters from 'start' through the end of 'S'."
  },

  "Oct$ ": {
    "prefix": "Oct$",
    "body": ["Oct$(${1:int_I});"],
    "description": "Returns an 11-character octal string equivalent to 'I'."
  },

  "RealToString ": {
    "prefix": "RealToString",
    "body": ["RealToString(${1:real_R}, ${2:int_length}, ${3:int_decimal})"],
    "description": "Returns a string representation of the real number 'R' with a minimum length of 'length', with 'decimal' digits to the right of the decimal point. If 'length' is less than zero, zero is used as the minimum length; if 'length' is greater than 100, 100 is used as the minimum length. If 'decimal' is less than zero, zero is used as the precision; if 'decimal' is greater than 20, 20 is used."
  },

  "Right$ ": {
    "prefix": "Right$",
    "body": ["Right$(${1:string_S}, ${2:int_length});"],
    "description": "Returns a string containing the rightmost 'length' characters of string 'S'. If 'length' is greater than the length of 'S', the function returns a copy of 'S'."
  },

  "Sign ": {
    "prefix": "Sign",
    "body": ["Sign(${1:real_x});"],
    "description": "Returns the sign of the numeric operand. If x < 0, the function returns a value of â€“1; otherwise, the value returned is 1."
  },

  "Sin ": {
    "prefix": "Sin",
    "body": ["Sin(${1:real_x});"],
    "description": "Returns the sine of x. x must be specified in radians."
  },

  "Space$ ": {
    "prefix": "Space$",
    "body": ["Space$(${1:int_num});"],
    "description": "Returns a string containing 'num' spaces"
  },

  "Sqrt ": {
    "prefix": "Sqrt",
    "body": ["Sqrt(${1:real_x});"],
    "description": "Returns the square root of x."
  },

  "StringToInteger ": {
    "prefix": "StringToInteger",
    "body": ["StringToInteger(${1:string_S});"],
    "description": "Returns the integer equivalent of the numeric string S. If S is not a valid string, function returns the value 0."
  },

  "StringToReal ": {
    "prefix": "StringToReal",
    "body": ["StringToReal(${1:string_S});"],
    "description": "Returns the real number equivalent of the numeric string S. If S is not a valid string, the function returns the value 0.0."
  },

  "Tan ": {
    "prefix": "Tan",
    "body": ["Tan(${1:real_x});"],
    "description": "Tan"
  },

  "UCase$ ": {
    "prefix": "UCase$",
    "body": ["UCase$(${1:string_S});"],
    "description": "Returns the string S with all lower-case letters converted to upper case"
  },

  "KeyPress ": {
    "prefix": "KeyPress",
    "body": ["KeyPress(${1:key_Keys});"],
    "description": "Provides intrinsic functionality for a key.  Mimicks actually physically pressing the referenced key"
  },

  "LockKey ": {
    "prefix": "LockKey",
    "body": ["LockKey(${1:keys_Key});"],
    "description": "Disables the specified front panel key."
  },

  "GetConsecNum ": {
    "prefix": "GetConsecNum",
    "body": ["GetConsecNum;"],
    "description": "Returns the value of the consecutive number counter."
  },

  "SetConsecNum ": {
    "prefix": "SetConsecNum",
    "body": ["SetConsecNum(${1:int_V});"],
    "description": "Sets the consecutive number counter to the value of V."
  },

  "SetUID ": {
    "prefix": "SetUID",
    "body": ["SetUID(${1:string_newid});"],
    "description": "Sets the unit identifier"
  },

  "UnlockKey ": {
    "prefix": "UnlockKey",
    "body": ["UnlockKey(${1:keys_Key});"],
    "description": "Enables the specified front panel key."
  },

  "ResetTimer ": {
    "prefix": "ResetTimer",
    "body": ["ResetTimer(${1:int_T});"],
    "description": "Resets the value of timer T (1â€“32) by stopping the timer, setting the timer mode to TimerOneShot, and setting the timer time-out to 0."
  },

  "SetTimer ": {
    "prefix": "SetTimer",
    "body": ["SetTimer(${1:int_T}, ${2:int_Value});"],
    "description": "Sets the time-out value of timer T (1â€“32). Timer values are specified in 0.01-second intervals (1= 10 ms, 100 = 1 second). For one-shot timers, the SetTimer function must be called again to restart the timer once it has expired."
  },

  "SetTimerMode ": {
    "prefix": "SetTimerMode",
    "body": ["SetTimerMode(${1:int_T}, ${2:Mode_timermode});"],
    "description": "Sets the mode value, 'timermode', of timer T (1â€“32). This function, normally included in a program startup handler, only needs to be called once for each timer unless the timer mode is changed."
  },

  "SetTimerDigOut ": {
    "prefix": "SetTimerDigOut",
    "body": ["SetTimerDigOut(${1:int_T}, ${2:int_slot}, ${3:int_bit});"],
    "description": "Used to provide precise control of state changes for timers using TimerDigoutOff or TimerDigoutOn modes. The state of the specified digital output ('slot', 'bit') is changed when timer T (1â€“32) expires"
  },

  "StartTimer ": {
    "prefix": "StartTimer",
    "body": ["StartTimer(${1:int_T});"],
    "description": "Starts timer T (1â€“32). For one-shot timers, this function must be called each time the timer is used. Continuous timers are started only once; they do not require another call to StartTimer unless stopped by a call to the StopTimer function. If a timer has been set with a time-out value of 0, StartTimer will not start the timer but will return SysOk"
  },

  "StopTimer ": {
    "prefix": "StopTimer",
    "body": ["StopTimer(${1:int_T});"],
    "description": "Stops timer T (1â€“32)."
  },

  "DisplayStatus ": {
    "prefix": "DisplayStatus",
    "body": ["DisplayStatus(${1:string_Msg});"],
    "description": "Displays the string 'msg' in the front panel status message area. The length of string 'msg' should not exceed 32 characters."
  },

  "PromptUser ": {
    "prefix": "PromptUser",
    "body": ["PromptUser(${1:string_msg});"],
    "description": "Opens the alpha entry box and places the string 'msg' in the user prompt area."
  },

  "PromptPassword ": {
    "prefix": "PromptPassword;",
    "body": ["PromptPassword(${1:string_msg});"],
    "description": "Brings up an alphanumeric prompt in which the text input is masked.  Returns SysCode"
  },

  "PromptNumeric ": {
    "prefix": "PromptNumeric;",
    "body": ["PromptNumeric(${1:string_msg});"],
    "description": "Brings up a numeric only prompt.  Returns SysCode."
  },

  "SetEntry ": {
    "prefix": "SetEntry",
    "body": ["SetEntry(${1:string_S});"],
    "description": "Sets the user entry for a programmed prompt. This procedure can be used to provide a default value for entry box text when prompting the operator for input. Up to 1000 characters can be specified."
  },

  "FileOpen ": {
    "prefix": "FileOpen",
    "body": ["FileOpen(${1:string_F}, ${2:FileDevice_D}, ${3:FileAccessMode_M});"],
    "description": "Opens text file F on device D with access mode M. This text file will be used for all subsequent USBWrite and USBWriteLn operations"
  },

  "USBFileOpen ": {
    "prefix": "USBFileOpen",
    "body": ["USBFileOpen(${1:string_F}, ${2:FileAccessMode_M});"],
    "description": "Read a file 'F' from the flash drive. Opening a file as Read positions the internal pointer at the start of the file. Opening a file as Create or Append positions the internal pointer at the end of the file. Any attempt to read a file opened as Create or Append will return SysEndOfFile."
  },

  "USBFileClose ": {
    "prefix": "USBFileClose",
    "body": ["USBFileClose;"],
    "description": "Used to close a currently opened file (see USBFileOpen). A file must be closed before device removal or the file contents may be corrupted."
  },

  "FileExists ": {
    "prefix": "FileExists",
    "body": ["FileExists(${1:string_F}, ${2:FileDevice_D});"],
    "description": "Returns status indicating whether file F exists on device D."
  },

  "USBFileExists ": {
    "prefix": "USBFileExists",
    "body": ["USBFileExists(${1:string_fileName});"],
    "description": "Checks to see if a file exists on the USB drive."
  },

  "FileDelete ": {
    "prefix": "FileDelete",
    "body": ["FileDelete(${1:string_F}, ${2:FileDevice_D});"],
    "description": "Deletes file F from device D."
  },

  "USBFileDelete ": {
    "prefix": "USBFileDelete",
    "body": ["USBFileDelete(${1:string_F});"],
    "description": "Deletes a file saved to the USB drive. To overwrite an existing file, the user program should first delete the file, then reopen it with Create access."
  },

  "SetFileTermin ": {
    "prefix": "SetFileTermin",
    "body": ["SetFileTermin(${1:LineTermination_termin});"],
    "description": "This determines what is appended at the end of each line.(FileCRLF, FileCR, FileLF)"
  },

  "SysCodeToString ": {
    "prefix": "SysCodeToString",
    "body": ["SysCodeToString(${1:SysCode_sc});"],
    "description": "Returns a string representation of the SysCode 'sc'"
  },

  "ChartInit ": {
    "prefix": "ChartInit",
    "body": ["ChartInit(${1:int_widgetNum}, ${2:string_fillColor}, ${3:string_lineColor}, ${4:string_pointColor}, ${5:int_maxPoints});"],
    "description": "Call this API to initialize the chart and set color values."
  },

  "ChartPlot ": {
    "prefix": "ChartPlot",
    "body": ["ChartPlot(${1:widget_num}, ${2:label}, ${3:value});"],
    "description": "Plots an individual point on the chart"
  },

  "ChartSetAnimation ": {
    "prefix": "ChartSetAnimation",
    "body": ["ChartSetAnimation(${1:int_widgetNum}, ${2:BooleanType_enabled};"],
    "description": "Turns animated rendering on or off"
  },

  "ChartRender ": {
    "prefix": "ChartRender",
    "body": ["ChartRender(${1:int_widgetNum});"],
    "description": "Draws the previously initialized and plotted graph to the display"
  },

  "ChartInsertToExisting ": {
    "prefix": "ChartInsertToExisting",
    "body": ["ChartInsertToExisting(${1:int_widgetNum}, ${2:string_label}, ${3:real_value});"],
    "description": "insert a new data point into a previously rendered chart. If the new point exceeds the max number of points set in ChartInit, the oldest or leftmost point on the chart is removed while the new point is added."
  },

  "ChartInitStatic ": {
    "prefix": "ChartInitStatic", 
    "body": ["ChartInitStatic(${1:int_Widgetno}, ${2:string_fillColor}, ${3:string_lineColor}, ${4:string_pointColor}, ${5:int_maxPoints});"], 
    "description": "Creates a larger static chart"
  },

  "ChartClear ": {
    "prefix": "ChartClear", 
    "body": ["ChartClear(${1:int_WidgetNo});"], 
    "description" : "Clears Static Chart to repopulate"
  },

  "ChartSetPointSize ": {
    "prefix": "ChartSetPointSize", 
    "body": ["ChartSetPointSize(${1:int_Widgetno}, ${2:int_size(1-5)});"], 
    "description": "Radius in pixels of chart point"
  },

  "BusyShow ": {
    "prefix": "BusyShow", 
    "body":["BusyShow;"], 
    "description": "Shows Busy Symbol On Screen"
  },

  "BusyHide ": {
    "prefix": "BusyHide", 
    "body":["BusyHide;"], 
    "description": "Removes Busy Symbol On Screen"
  },

  "SubmitData": {
    "prefix": "SubmitData", 
    "body":["SubmitData(${1:int_ScaleNum}, ${2:real_Wgt}, ${3:mode_GrossNet}, ${4:unitType_units}, ${5:real_Tare});"], 
    "description": "Sets data for programmable scale"
  },

  "SubmitDSPData": {
    "prefix": "SubmitDSPData", 
    "body":["SubmitData(${1:int_ScaleNum}, ${2:real_Wgt}, ${3:string_Units}, ${4:DecimalType_dp});"], 
    "description": "Sets data for programmable scale"
  },

  "StartFTPServer": {
    "prefix": "StartFTPServer",
    "body":["StartFTPServer;"],
    "description": "Starts FTP Server, allowing external access to the files stored there. Returns SysCode"
  },

  "StopFTPServer": {
    "prefix": "StopFTPServer",
    "body":["StopFTPServer;"],
    "description": "Stops FTP Server, removing the ability to externally access the FTP files"
  },

  "GetMacAddress ": {
    "prefix": "GetMacAddress",
    "body":["GetMacAddress"],
    "description": "returns a string value of the read-only on-board MAC address"
  }, 

  "SetAllDigoutOff ": {
    "prefix": "SetAllDigoutOff",
    "body": ["SetAllDigoutOff(${1:int_slotNum});"],
    "description": "Sets all Digout on 'slotNum' to off.  Returns SysCode"
  }

}