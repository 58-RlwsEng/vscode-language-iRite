{"version":3,"sources":["../webpack/bootstrap","../external \"child_process\"",".././src/extension.ts","../external \"vscode\"","../external \"fs\"",".././node_modules/opener/lib/opener.js","../external \"os\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","opener","iRiteChannel","vscode","window","createOutputChannel","context","console","log","enginePath","workspace","getConfiguration","optionRev","title","checkEngineDefined","Promise","resolve","reject","engineType","optionTest","showErrorMessage","then","option","checkEnginePathDefined","engine","fs","stat","err","code","showInformationMessage","commands","registerCommand","clear","saveAll","success","openTextDoc","appendLine","activeTextEditor","document","fileName","show","showTextDocument","srcEditor","toString","engineParameters","compilerPath","filepath","path","cp","execFile","error","data","stderr","catch","setStatusBarMessage","append","reason","textEditor","childProcess","os","args","options","callback","command","platform","process","release","indexOf","concat","map","replace"],"mappings":"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","file":"extension.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = require(\"child_process\");","\r\n'use strict';\r\n// The module 'vscode' contains the VS Code extensibility API\r\n// Import the module and reference it with the alias vscode in your code below\r\nimport * as vscode from \"vscode\";\r\n//import * as builder from './build'; //removed until language server build starts\r\nimport fs = require(\"fs\");\r\nimport path = require(\"path\");\r\nimport cp = require(\"child_process\");\r\n// import { commands, Disposable, ExtensionContext, TextEditor, window } from 'vscode';\r\n// import { ActiveEditorTracker } from './activeEditorTracker';\r\n// import { TextEditorComparer } from './comparers';\r\n// import { WorkspaceState } from './constants';\r\n// import { Logger } from './logger';\r\n// import { ISavedEditor, SavedEditor } from './savedEditor';\r\n\r\nvar opener = require(\"opener\");\r\nvar iRiteChannel = vscode.window.createOutputChannel(\"iRite Information\");\r\n\r\n// this method is called when your extension is activated\r\n// your extension is activated the very first time the command is executed\r\nexport function activate(context: vscode.ExtensionContext) {\r\n  interface EngineParams {\r\n    engine: string;\r\n    enginePath: string;\r\n  }\r\n\r\n  // Use the console to output diagnostic information (console.log) and errors (console.error)\r\n  // This line of code will only be executed once when your extension is activated\r\n  console.log(\"Congratulations, iRite is now active!\");\r\n\r\n  //check to see if the .exe is in specified path, if not display message to download revolution\r\n  let enginePath: string = vscode.workspace\r\n    .getConfiguration(\"irite\")\r\n    .get(\"build.enginePath\", \"\");\r\n  var optionRev = <vscode.MessageItem>{ title: \"Get Revolution\" };\r\n\r\n  fs.stat(enginePath, function(err, stat) {\r\n    if (err == null) {\r\n      console.log(\"Revolution exists\");\r\n    } else if (err.code == \"ENOENT\") {\r\n      // file does not exist\r\n      vscode.window\r\n        .showInformationMessage(\r\n          \"Revolution can not be located, would you like to download it?\",\r\n          optionRev\r\n        )\r\n        .then(option => {\r\n          if (typeof option == \"undefined\") {\r\n            return;\r\n          }\r\n          switch (option.title) {\r\n            case optionRev.title:\r\n              opener(\r\n                \"https://www.ricelake.com/en-us/products/product-details/revolution-scale-software#/resources-downloads\"\r\n              );\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n        });\r\n    } else {\r\n      console.log(\"Revolution Checker: \", err.code);\r\n    }\r\n  });\r\n\r\n  //registercommands takes reference from package.json, alter that file for more/different commands\r\n  vscode.commands.registerCommand(\"irite.build\", () => {\r\n    iRiteChannel.clear();\r\n    vscode.workspace.saveAll().then(\r\n      success => {\r\n        if (success) {\r\n          iRiteChannel.appendLine(\"All Files Saved\");\r\n\r\n          var openTextDoc: vscode.TextDocument;\r\n\r\n          // async function save () {\r\n          //   try {\r\n          //     const editorTracker = new ActiveEditorTracker();\r\n\r\n          //     let active = window.activeTextEditor;\r\n          //     let editor = active;\r\n          //     const openEditors: TextEditor[] = [];\r\n          //     do {\r\n          //         if (editor != null) {\r\n          //             // If we didn't start with a valid editor, set one once we find it\r\n          //             if (active === undefined) {\r\n          //                 active = editor;\r\n          //             }\r\n\r\n          //             openEditors.push(editor);\r\n          //         }\r\n\r\n          //         editor = await editorTracker.awaitNext(500);\r\n          //         if (editor !== undefined && openEditors.some(_ => TextEditorComparer.equals(_, editor, { useId: true, usePosition: true }))) break;\r\n          //     } while ((active === undefined && editor === undefined) || !TextEditorComparer.equals(active, editor, { useId: true, usePosition: true }));\r\n\r\n          //       editorTracker.dispose();\r\n\r\n          //       const editors = openEditors\r\n          //           .filter(_ => _.document !== undefined)\r\n          //           .map(_ => {\r\n          //               return {\r\n          //                   uri: _.document.uri,\r\n          //                   viewColumn: _.viewColumnnp\r\n          //               } as ISavedEditor;\r\n          //           });\r\n\r\n          //       this.context.workspaceState.update(WorkspaceState.SavedDocuments, editors);\r\n          //   }\r\n          //   catch (ex) {\r\n          //       Logger.error(ex, 'DocumentManager.save');\r\n          //   }\r\n          // }\r\n\r\n\r\n          openTextDoc = vscode.window.activeTextEditor.document;\r\n          iRiteChannel.appendLine(\"Open File: \" + openTextDoc.fileName);\r\n\r\n          iRiteChannel.show();\r\n          vscode.window.showTextDocument(openTextDoc).then(srcEditor => {\r\n            checkEngineDefined().then(engineType => {\r\n              checkEnginePathDefined(engineType.toString()).then(engineParameters => {\r\n                //got engine path and compiler from config, now init active window and push to iRiteProcessor\r\n                //iRiteProcessor takes argument of desired .src file path\r\n                let enginePath: string = vscode.workspace\r\n                  .getConfiguration(\"irite\")\r\n                  .get(\"build.enginePath\", \"\");\r\n                let compilerPath: string = vscode.workspace\r\n                  .getConfiguration(\"irite\")\r\n                  .get(\"build.compilerPath\", \"\");\r\n                let filepath = openTextDoc.fileName;\r\n                iRiteChannel.appendLine(\"Building: \" + filepath);\r\n\r\n                var path = enginePath;\r\n\r\n                cp.execFile(\r\n                  path,\r\n                  [filepath, compilerPath, \"build\"],\r\n                  function (error, data, stderr) {\r\n                    if (error != null) {\r\n                      iRiteChannel.appendLine(\"Compile Function ERROR: \" + error + \"  stderr:\" + stderr + \"|\");\r\n                      console.log(error);\r\n                      console.log(stderr);\r\n                    }else{\r\n                      iRiteChannel.appendLine(data);\r\n                    }\r\n                  }\r\n                );\r\n              })\r\n                .catch(error => {\r\n                  vscode.window.setStatusBarMessage(\"Error 112: \" + error, 5000)\r\n                  vscode.window.showErrorMessage(\"Open Folder to Build Properly\");\r\n                  iRiteChannel.appendLine(\"Error 114:  checkEnginePathDefined: \" + error);\r\n                });\r\n            })\r\n              .catch(error => {\r\n                vscode.window.showErrorMessage(\"Error 118: \" + error);\r\n                vscode.window.setStatusBarMessage(\"Error 119:  + checkEngineDefined: \" + error, 5000);\r\n                iRiteChannel.appendLine(\"Error 120: checkEngineDefined: \" + error);\r\n              });\r\n          },\r\n            err => {\r\n              vscode.window.showErrorMessage(\"Error 124: \" + err);\r\n              vscode.window.setStatusBarMessage(\"Error 125: \" + err, 5000);\r\n              iRiteChannel.appendLine(\"Error 126: \" + err);\r\n            }\r\n          );\r\n\r\n        } else {\r\n          vscode.window.setStatusBarMessage(\"Error Saving Files SBMsg\", 5000);\r\n          vscode.window.showErrorMessage(\"Error Saving Files EM\");\r\n          iRiteChannel.append(\r\n            \"\\n\\n*************************************\\nError Saving Files.  Rectify and rebuild.\\n*************************************\\n\\n\"\r\n          );\r\n        }\r\n      },\r\n      reason => {\r\n        vscode.window.showErrorMessage(reason + \"\\nUnable to Save!\\n\\n\");\r\n        vscode.window.setStatusBarMessage(reason + \"\\nUnable to Save!\\n\\n\");\r\n        iRiteChannel.append(\r\n          \"*************************************\\n\" +\r\n            \"*************************************\\n\" +\r\n            \"Unable to Save!\" +\r\n            \"*************************************\\n\" +\r\n            \"*************************************\\n\"\r\n        );\r\n        iRiteChannel.append(\"\\nError 171: Please open folder(workspace).\\n\");\r\n      }\r\n    );\r\n  });\r\n\r\n  //registercommands takes reference from package.json, alter that file for more/different commands\r\n  vscode.commands.registerCommand(\"irite.deploy\", () => {\r\n    // vscode.commands.executeCommand(\"irite.build\");  // WOrry about this later :)\r\n    checkEngineDefined()\r\n      .then(engineType => {\r\n        checkEnginePathDefined(engineType.toString())\r\n          .then(engineParameters => {\r\n            //got engine path and compiler from config, now init active window and push to iRiteProcessor\r\n            //iRiteProcessor takes argument of desired .src file path\r\n            let enginePath: string = vscode.workspace\r\n              .getConfiguration(\"irite\")\r\n              .get(\"build.enginePath\", \"\");\r\n            let compilerPath: string = vscode.workspace\r\n              .getConfiguration(\"irite\")\r\n              .get(\"build.compilerPath\", \"\");\r\n            let textEditor = vscode.window.activeTextEditor;\r\n            iRiteChannel.append(\r\n              \"*************************************\\n\" +\r\n                \"*************************************\\n\" +\r\n                \"iRite Deploying: \" +\r\n                textEditor.document.fileName +\r\n                \"\\n\"\r\n            );\r\n            let filepath = textEditor.document.fileName;\r\n            var path = enginePath;\r\n\r\n            cp.execFile(path, [filepath, compilerPath, \"deploy\"], function (\r\n              error,\r\n              data,\r\n              stderr\r\n            ) {\r\n              if (stderr != null) {\r\n                console.log(error);\r\n                console.log(stderr);\r\n              }\r\n              iRiteChannel.append(data);\r\n            });\r\n          })\r\n          .catch(error => {\r\n            vscode.window.showErrorMessage(error);\r\n            iRiteChannel.appendLine(error);\r\n          });\r\n      })\r\n      .catch(error => {\r\n        vscode.window.setStatusBarMessage(\"checkEngineDefined: \" + error, 5000);\r\n        iRiteChannel.appendLine(\"checkEngineDefined: \" + error);\r\n      });\r\n  });\r\n\r\n  function checkEngineDefined() {\r\n    return new Promise((resolve, reject) => {\r\n      let engineType: string = vscode.workspace\r\n        .getConfiguration(\"irite\")\r\n        .get(\"build.engine\", \"\");\r\n      if (engineType == \"\") {\r\n        var optionRev = <vscode.MessageItem>{\r\n          title: \"revolution\"\r\n        };\r\n        var optionTest = <vscode.MessageItem>{\r\n          title: \"Test\"\r\n        };\r\n        vscode.window\r\n          .showErrorMessage(\r\n            'The \"irite.build.engine\" setting is not defined. Do you want to download Revolution?',\r\n            optionRev,\r\n            optionTest\r\n          )\r\n          .then(option => {\r\n            // nothing selected\r\n            if (typeof option == \"undefined\") {\r\n              reject(\"undefined\");\r\n              return;\r\n            }\r\n            switch (option.title) {\r\n              case optionRev.title:\r\n                opener(\r\n                  \"https://www.ricelake.com/en-us/products/product-details/revolution-scale-software#/resources-downloads\"\r\n                );\r\n                break;\r\n              case optionTest.title:\r\n                opener(\"http://www.ricelake.com\");\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n            reject(\"hyperlink\");\r\n          });\r\n      } else {\r\n        resolve(engineType);\r\n      }\r\n    });\r\n  }\r\n\r\n  function checkEnginePathDefined(engine: string) {\r\n    return new Promise((resolve, reject) => {\r\n      let enginePath: string = vscode.workspace\r\n        .getConfiguration(\"irite\")\r\n        .get(\"build.enginePath\", \"\");\r\n      if (enginePath == \"\") {\r\n        reject(\r\n          'The \"irite.build.enginePath\" setting is not defined. Please configure.'\r\n        );\r\n        return;\r\n      }\r\n      resolve(enginePath);\r\n    });\r\n  }\r\n}","module.exports = require(\"vscode\");","module.exports = require(\"fs\");","\"use strict\";\nvar childProcess = require(\"child_process\");\nvar os = require(\"os\");\n\nmodule.exports = function opener(args, options, callback) {\n    var platform = process.platform;\n\n    // Attempt to detect Windows Subystem for Linux (WSL). WSL  itself as Linux (which works in most cases), but in\n    // this specific case we need to treat it as actually being Windows. The \"Windows-way\" of opening things through\n    // cmd.exe works just fine here, whereas using xdg-open does not, since there is no X Windows in WSL.\n    if (platform === \"linux\" && os.release().indexOf(\"Microsoft\") !== -1) {\n        platform = \"win32\";\n    }\n\n    // http://stackoverflow.com/q/1480971/3191, but see below for Windows.\n    var command;\n    switch (platform) {\n        case \"win32\": {\n            command = \"cmd.exe\";\n            break;\n        }\n        case \"darwin\": {\n            command = \"open\";\n            break;\n        }\n        default: {\n            command = \"xdg-open\";\n            break;\n        }\n    }\n\n    if (typeof args === \"string\") {\n        args = [args];\n    }\n\n    if (typeof options === \"function\") {\n        callback = options;\n        options = {};\n    }\n\n    if (options && typeof options === \"object\" && options.command) {\n        if (platform === \"win32\") {\n            // *always* use cmd on windows\n            args = [options.command].concat(args);\n        } else {\n            command = options.command;\n        }\n    }\n\n    if (platform === \"win32\") {\n        // On Windows, we really want to use the \"start\" command. But, the rules regarding arguments with spaces, and\n        // escaping them with quotes, can get really arcane. So the easiest way to deal with this is to pass off the\n        // responsibility to \"cmd /c\", which has that logic built in.\n        //\n        // Furthermore, if \"cmd /c\" double-quoted the first parameter, then \"start\" will interpret it as a window title,\n        // so we need to add a dummy empty-string window title: http://stackoverflow.com/a/154090/3191\n        //\n        // Additionally, on Windows ampersand needs to be escaped when passed to \"start\"\n        args = args.map(function (value) {\n            return value.replace(/&/g, \"^&\");\n        });\n        args = [\"/c\", \"start\", \"\\\"\\\"\"].concat(args);\n    }\n\n    return childProcess.execFile(command, args, options, callback);\n};\n","module.exports = require(\"os\");"],"sourceRoot":""}